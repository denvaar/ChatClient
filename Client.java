package ChatClient;

import java.io.*;
import javax.swing.*;
import javax.swing.text.*;
import java.awt.event.*;
import java.net.*;
import java.awt.*;


/*
    Client

    Connects to a server and provides a user interface for chatting with
    other connected clients. The components are initialized and an attempt
    is made to connect to the server. If the connection is established,
    then a new thread is spawned and the client enters the main loop where
    it listens and responds to messages.

*/
public class Client extends JFrame implements Runnable, ActionListener {

    private JTextArea jta_input;
    private JTextPane jtp_output;
    private JScrollPane jsp_jtp_output;
    private JScrollPane jsp_jta_input;
    private JButton jbtn_send;
    private JMenuBar jmb_menu;
    private JMenu jm_menu;
    private JMenuItem jmi_new_connection;
    private JMenuItem jmi_disconnect;
    private JList jlst_client_list; 
    private DefaultListModel lm_client_list;
    private JScrollPane jsp_client_list;
 
    private DataInputStream input;
    private DataOutputStream output;

    private Socket socket;
    private TextStyles ts;
    private String username;
    private SoundListener sound;
    private StartupDialog init;
    
    // Application entry point.
    public static void main(String args[]) {
        new Client();
    }
    
    // Constructor.
    public Client() {
        this.socket = null;
        this.initComponents();
        
        if (!this.connectToServer()) {
            this.jta_input.setEnabled(false);
            this.jbtn_send.setEnabled(false);
        }

    }

    // Initialize all of the GUI components.
    private void initComponents() {
 
        // JFrame initialization.
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
        setTitle("Farm Chat");
        setMinimumSize(new Dimension(430, 600));
        setPreferredSize(new Dimension(430, 600));
        setVisible(true);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                disconnectFromServer();
                System.exit(0);
            }
            /*public void windowClosed(WindowEvent evt) {
                System.exit(0);
            }*/
        });

        // TextStyles object initialization.
        ts = new TextStyles(); 
        
        // JButton initialization.
        jbtn_send = new JButton();
        jbtn_send.setText("Send");
        jbtn_send.addActionListener(this);
        
        // JTextPane for output initialization.
        jtp_output = new JTextPane();
        DefaultCaret caret = (DefaultCaret)jtp_output.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        jtp_output.setEditable(false);
        
        // JScrollPane for output text pane initialization.
        jsp_jtp_output = new JScrollPane();
        jsp_jtp_output.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        jsp_jtp_output.setViewportView(jtp_output);
        
        // JTextArea for input initialization.
        jta_input = new JTextArea();
        jta_input.setLineWrap(true);
        jta_input.setWrapStyleWord(true);
        jta_input.setColumns(20);
        jta_input.setRows(5);
        jta_input.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                    evt.consume();
                    chatMessage(jta_input.getText());
                }
            }
        });

        // JScrollPane for input text area initialization.
        jsp_jta_input = new JScrollPane();
        jsp_jta_input.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        jsp_jta_input.setViewportView(jta_input);
        
        // DefaultListModel for connected client list initialization.
        lm_client_list = new DefaultListModel();
        
        jlst_client_list = new JList();
        jlst_client_list.setModel(lm_client_list);
        jlst_client_list.setCellRenderer(new DefaultListCellRenderer() {
            public Component getListCellRendererComponent(JList list,
                                Object value, int index, boolean isSelected,
                                boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index, false, false);
                return this;
            }
        });


        jbtn_send.setMargin(new Insets(0, 0, 0, 0));
        // JScrollPane for connected client list initialization.
        jsp_client_list = new JScrollPane(jlst_client_list);

        // The following code was generated by CodeBlocks' GUI designer.        
        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jsp_jtp_output)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jsp_client_list, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jsp_jta_input, GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtn_send, GroupLayout.PREFERRED_SIZE, 54, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jsp_jtp_output, GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                    .addComponent(jsp_client_list))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(jsp_jta_input, GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
                    .addComponent(jbtn_send, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        ); 
        

        // Check if using OSX so that menu bar can be put in the system menu bar instead. 
        String osName = System.getProperty("os.name").toLowerCase();
        boolean isMac = osName.startsWith("mac os x");
        
        if (isMac) {
            System.setProperty("apple.laf.useScreenMenuBar", "true"); 
        }

        // JMenuItem "New" and "Disconnect" menu items initialization.
        jmi_new_connection = new JMenuItem("New");
        jmi_disconnect = new JMenuItem("Disconnect");
        jmi_new_connection.addActionListener(this);
        jmi_disconnect.addActionListener(this);

        // JMenu initialization.
        jm_menu = new JMenu("Connections");
        jm_menu.add(jmi_new_connection);
        jm_menu.add(jmi_disconnect);
        
        // JMenuBar initialization.
        jmb_menu = new JMenuBar();
        jmb_menu.add(jm_menu);
        
        setJMenuBar(jmb_menu);
       
        pack();

    }

    // Send's a given message formatted as CHAT_TEXT to the server.
    private void chatMessage(String message) {
        if (!message.equals("")) {    
            try {
                this.output.writeUTF("CHAT_TEXT|" + this.username + "|" + message); // This is where the message is sent.
                this.jta_input.setText("");
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }
    
    // Send's a given message formatted as SERVER_TEXT to the server.
    private void connectionMessage(String message) {
        if (!message.equals("")) {    
            try {
                this.output.writeUTF("SERVER_TEXT|" + this.username + "|" + message); // This is where the message is sent.
            } catch (IOException e) {
                //JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }

    // ActionEvent handler for this JFrame.
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == jbtn_send)
            chatMessage(this.jta_input.getText());
        else if (e.getSource() == jmi_new_connection)
            connectToServer();
        else if (e.getSource() == jmi_disconnect)
            disconnectFromServer();
        else
            chatMessage(e.getActionCommand());
    }
    
    // Try to establish a connection with the chat server.
    // return true if connection was made, return false
    // if the connection failed.
    private boolean connectToServer() {
        
        // Create a "New Connection" dialog box.
        init = new StartupDialog(this);
        
        // Grab the host, port, and desired username for the connection.
        String host = init.getHost();
        int port = init.getPort();
        this.username = init.getUsername();
        
        try {
            
            // Don't try to connect if the user canceled the "New Connection" dialog.
            if (init.canceled) throw new IOException();

            // Try to connect to the given host and port.
            this.socket = new Socket(host, port);

            // If a connection was made, the rest of this try block will execute.
            try {
                this.jtp_output.getDocument().insertString(this.jtp_output.getDocument().getLength(),
                        "Connected to " + host + ".\n", ts.systemTextStyle());
                this.jtp_output.getDocument().insertString(this.jtp_output.getDocument().getLength(),
                        "You have joined the chat as '" + this.username + "'.\n", ts.systemMessageTextStyle());
            } catch (BadLocationException err) {
                JOptionPane.showMessageDialog(this, err.getMessage(), "Error", JOptionPane.INFORMATION_MESSAGE);
            }

            this.jmi_new_connection.setEnabled(false);
            this.jmi_disconnect.setEnabled(true);
            this.jta_input.setEnabled(true);
            this.jbtn_send.setEnabled(true);
            
            // Get an input and output stream to the server.
            this.input = new DataInputStream(this.socket.getInputStream());
            this.output = new DataOutputStream(this.socket.getOutputStream());
            
            connectionMessage(this.username + " has joined the chat.");
            
            // Start a new thread.
            new Thread(this).start();

        // This catch block will execute if a connection was not made.
        } catch (IOException e) {
            this.jmi_disconnect.setEnabled(false);
            try {
                this.jtp_output.getDocument().insertString(this.jtp_output.getDocument().getLength(),
                        "Unable to connect to " + host + " on port " + port + ".\n", ts.systemErrorTextStyle());
            } catch (BadLocationException err) {
                JOptionPane.showMessageDialog(this, err.getMessage(), "Error", JOptionPane.INFORMATION_MESSAGE);
            }

            return false; // false: no connection was established.
        }

        return true; // true: connection was established.
    }

    // Disconnect from the server.
    // TODO: This code to close the socket is a little sketchy.
    private void disconnectFromServer() {
        try {
            connectionMessage(this.username + " has left the chat.");
            String u[] = new String[] {this.username};
            updateList(u);
            if (!this.socket.isClosed()) {
                this.socket.close(); // Close the socket.
            }
            this.jmi_new_connection.setEnabled(true);
            this.jmi_disconnect.setEnabled(false);
        } catch (IOException e) {
            // don't show a message because the window is closing anyway.
        } catch (Exception e) {
            //JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    // Play the sound resource of the given string. 
    private void playSound(String str) {
        this.sound = new SoundListener();
        this.sound.play(str);
    }

    // Checks if the given string contains any special words.
    private void checkForAnimals(String str) {
        if (str.toLowerCase().contains("welcome")) {
            playSound("welcome");
        }
        if (str.toLowerCase().contains("bear")) {
            playSound("bear");
        }
        if (str.toLowerCase().contains("cat")) {
            playSound("cat");
        }
        if (str.toLowerCase().contains("chewbacca")) {
            playSound("chewbacca");
        }
        if (str.toLowerCase().contains("chicken")) {
            playSound("chicken");
        }
        if (str.toLowerCase().contains("cow")) {
            playSound("cow");
        }
        if (str.toLowerCase().contains("crane")) {
            playSound("crane");
        }
        if (str.toLowerCase().contains("dog")) {
            playSound("dog");
        }
        if (str.toLowerCase().contains("donkey")) {
            playSound("donkey");
        }
        if (str.toLowerCase().contains("duck")) {
            playSound("duck");
        }
        if (str.toLowerCase().contains("elephant")) {
            playSound("elephant");
        }
        if (str.toLowerCase().contains("farmer")) {
            playSound("farmer");
        }
        if (str.toLowerCase().contains("fish")) {
            playSound("fish");
        }
        if (str.toLowerCase().contains("fly")) {
            playSound("fly");
        }
        if (str.toLowerCase().contains("frog")) {
            playSound("frog");
        }
        if (str.toLowerCase().contains("goat")) {
            playSound("goat");
        }
        if (str.toLowerCase().contains("goose")) {
            playSound("goose");
        }
        if (str.toLowerCase().contains("haha")) {
            playSound("haha");
        }
        if (str.toLowerCase().contains("horse")) {
            playSound("horse");
        }
        if (str.toLowerCase().contains("jar-jar-binks")) {
            playSound("jar-jar-binks");
        }
        if (str.toLowerCase().contains("lion")) {
            playSound("lion");
        }
        if (str.toLowerCase().contains("llama")) {
            playSound("llama");
        }
        if (str.toLowerCase().contains("monkey")) {
            playSound("monkey");
        }
        if (str.toLowerCase().contains("mouse")) {
            playSound("mouse");
        }
        if (str.toLowerCase().contains("owl")) {
            playSound("owl");
        }
        if (str.toLowerCase().contains("peacock")) {
            playSound("peacock");
        }
        if (str.toLowerCase().contains("rabbit")) {
            playSound("rabbit");
        }
        if (str.toLowerCase().contains("rancor")) {
            playSound("rancor");
        }
        if (str.toLowerCase().contains("rooster")) {
            playSound("rooster");
        }
        if (str.toLowerCase().contains("sheep")) {
            playSound("sheep");
        }
        if (str.toLowerCase().contains("turkey")) {
            playSound("turkey");
        }
        if (str.toLowerCase().contains("pig")) {
            playSound("pig");
        }
    }
    
    // Updates the list of connected clients to the server.
    private void updateList(String[] users) {
        this.lm_client_list.removeAllElements();
        for (String user : users) {
            if (!this.lm_client_list.contains(user)) {
                this.lm_client_list.addElement(user);
            }
        }
    }

    // run() is executed when the thread begins. 
    public void run() {

        // This is basically the main loop. It listens for messages and responds accordingly.
        try {
            while (true) {
                String message = this.input.readUTF(); // This is where the message is recieved.
                String[] _message = message.split("\\|");
                String[] users = _message[4].split(",");
                updateList(users);
                try {
 
                    if (_message[0].equals("SERVER_TEXT")) {
                        if (!_message[1].equals("")) {
                            if (!_message[1].equals(this.username)) {
                                this.jtp_output.getDocument().insertString(this.jtp_output.getDocument().getLength(),
                                    _message[2] + "\n", ts.systemMessageTextStyle());
                            }
                        }
                    }
                    
                    else {

                        checkForAnimals(_message[2]);

                        this.jtp_output.getDocument().insertString(this.jtp_output.getDocument().getLength(),
                                "[" + _message[1] + "] ", ts.userTextStyle());
                        this.jtp_output.getDocument().insertString(this.jtp_output.getDocument().getLength(),
                                _message[2] + "\n", ts.messageTextStyle());
                    }

                } catch (BadLocationException badLocation) {
                    badLocation.printStackTrace();
                }
            }

        } catch (IOException e) {
            try {
                this.jtp_output.getDocument().insertString(this.jtp_output.getDocument().getLength(),
                                                            "Lost connection to server!\n",
                                                            ts.systemErrorTextStyle());
                this.jta_input.setEnabled(false);
                this.lm_client_list.removeAllElements();
                this.jmi_new_connection.setEnabled(true);
                this.jbtn_send.setEnabled(false);
            } catch (BadLocationException err) {
                JOptionPane.showMessageDialog(this, err.getMessage(), "Error", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }

}


